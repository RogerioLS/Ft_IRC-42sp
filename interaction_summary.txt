Resumo da Jornada:

1.  Contexto Inicial: Você forneceu o diretório do projeto `Ft_IRC-42sp` e enfatizou a importância de aderir às normas da Ecole 42, especificamente mantendo o padrão C++98 para o código principal.
2.  Problema C++11 no Makefile: Identificamos que o `Makefile` estava usando a flag `-std=c++11`.
    *   Solução: Alterei o `Makefile` para usar `-std=c++98`.
3.  Erros de Compilação (std::to_string): A mudança para C++98 revelou erros de compilação devido ao uso de `std::to_string` (recurso do C++11).
    *   Solução: Substituí `std::to_string` por `std::stringstream` em `sources/server/Channel.cpp`.
4.  Erros de Compilação (override): Em seguida, surgiram erros relacionados à palavra-chave `override` (também um recurso do C++11).
    *   Solução: Removi a palavra-chave `override` de `includes/server/Server.hpp` e `includes/server/IServer.hpp`.
5.  Problemas na Compilação e Execução dos Testes: Os testes falhavam devido a conflitos de versão C++ (Google Test exige C++14) e o `main.cpp` do projeto principal sendo linkado no executável de teste.
    *   Solução: Ajustei o `Makefile` principal para manter C++98. Configurei o `Makefile_test` para compilar os testes com C++14 e para excluir `main.o` da compilação do executável de teste, garantindo que o `gtest_main` funcionasse corretamente.
6.  Problemas na Captura de Mensagens nos Testes: Os testes de `PRIVMSG`, `TOPIC` e `HELP` falhavam porque as mensagens enviadas pelo `CommandHandler` não estavam sendo capturadas pelo `ServerMock`.
    *   Solução: Adicionei o método `sendMessage` à interface `IServer` e o implementei tanto na classe `Server` (usando `send()` real) quanto no `ServerMock` (capturando mensagens). Atualizei o `CommandHandler` para usar `_server.sendMessage()`. Também ajustei as asserções nos testes para corresponderem exatamente às mensagens esperadas e à contagem correta.
7.  Refactoring dos Comandos: Você solicitou a separação da lógica dos comandos `JOIN`, `PRIVMSG`, `TOPIC` e `HELP` em arquivos `.cpp` e `.hpp` dedicados.
    *   Solução: Criei `JoinCommand.hpp/.cpp`, `PrivmsgCommand.hpp/.cpp`, `TopicCommand.hpp/.cpp` e `HelpCommand.hpp/.cpp`. Movi a lógica de `CommandHandler.cpp` para esses novos arquivos, transformando-os em métodos estáticos. Atualizei `CommandHandler.hpp` e `CommandHandler.cpp` para chamar esses novos métodos.
8.  Erro de Digitação no Refactoring: Um erro de digitação (`n}`) foi introduzido em `sources/command/TopicCommand.cpp` durante o refactoring.
    *   Solu��ão: Corrigi o erro de digitação em `sources/command/TopicCommand.cpp`.
9.  Verificação Final: Após todas as alterações, o projeto principal compila com C++98 e todos os 13 testes de unidade passam com C++14, confirmando a funcionalidade e a conformidade com as normas.
10. Validação dos Comandos e Respostas IRC: Focamos em refinar os comandos existentes para cumprir as especificações da RFC.
    *   **Plano:** Adicionar respostas numéricas de erro/sucesso para o cliente, em vez de apenas logs no servidor.
    *   **Solução Centralizada:** Criei o arquivo `includes/utils/Messages.hpp` para centralizar todas as respostas numéricas do IRC, melhorando a manutenibilidade.
    *   **Refatoração do `TOPIC`:** Adicionei uma verificação para garantir que o cliente seja membro do canal antes de permitir a visualização ou alteração do tópico, enviando `ERR_NOTONCHANNEL` se necessário.
    *   **Refatoração do `JOIN`:** Implementei o envio das respostas padrão que um cliente espera ao entrar em um canal: broadcast da entrada, `RPL_TOPIC` (ou `RPL_NOTOPIC`) e a lista de nomes (`RPL_NAMREPLY`/`RPL_ENDOFNAMES`).
    *   **Correções de Compilação:** Durante o processo, corrigi uma série de erros de compilação em `Channel.cpp`, `NickCommand.cpp`, `PassCommand.cpp`, e `UserCommand.cpp` que surgiram devido à nova estrutura de mensagens e ao tratamento de parâmetros não utilizados, garantindo que o projeto voltasse a compilar com sucesso.