Resumo da Jornada:

1.  Contexto Inicial: Você forneceu o diretório do projeto `Ft_IRC-42sp` e enfatizou a importância de aderir às normas da Ecole 42, especificamente mantendo o padrão C++98 para o código principal.
2.  Problema C++11 no Makefile: Identificamos que o `Makefile` estava usando a flag `-std=c++11`.
    *   Solução: Alterei o `Makefile` para usar `-std=c++98`.
3.  Erros de Compilação (std::to_string): A mudança para C++98 revelou erros de compilação devido ao uso de `std::to_string` (recurso do C++11).
    *   Solução: Substituí `std::to_string` por `std::stringstream` em `sources/server/Channel.cpp`.
4.  Erros de Compilação (override): Em seguida, surgiram erros relacionados à palavra-chave `override` (também um recurso do C++11).
    *   Solução: Removi a palavra-chave `override` de `includes/server/Server.hpp` e `includes/server/IServer.hpp`.
5.  Problemas na Compilação e Execução dos Testes: Os testes falhavam devido a conflitos de versão C++ (Google Test exige C++14) e o `main.cpp` do projeto principal sendo linkado no executável de teste.
    *   Solução: Ajustei o `Makefile` principal para manter C++98. Configurei o `Makefile_test` para compilar os testes com C++14 e para excluir `main.o` da compilação do executável de teste, garantindo que o `gtest_main` funcionasse corretamente.
6.  Problemas na Captura de Mensagens nos Testes: Os testes de `PRIVMSG`, `TOPIC` e `HELP` falhavam porque as mensagens enviadas pelo `CommandHandler` não estavam sendo capturadas pelo `ServerMock`.
    *   Solução: Adicionei o método `sendMessage` à interface `IServer` e o implementei tanto na classe `Server` (usando `send()` real) quanto no `ServerMock` (capturando mensagens). Atualizei o `CommandHandler` para usar `_server.sendMessage()`. Também ajustei as asserções nos testes para corresponderem exatamente às mensagens esperadas e à contagem correta.
7.  Refactoring dos Comandos: Você solicitou a separação da lógica dos comandos `JOIN`, `PRIVMSG`, `TOPIC` e `HELP` em arquivos `.cpp` e `.hpp` dedicados.
    *   Solução: Criei `JoinCommand.hpp/.cpp`, `PrivmsgCommand.hpp/.cpp`, `TopicCommand.hpp/.cpp` e `HelpCommand.hpp/.cpp`. Movi a lógica de `CommandHandler.cpp` para esses novos arquivos, transformando-os em métodos estáticos. Atualizei `CommandHandler.hpp` e `CommandHandler.cpp` para chamar esses novos métodos.
8.  Erro de Digitação no Refactoring: Um erro de digitação (`n}`) foi introduzido em `sources/command/TopicCommand.cpp` durante o refactoring.
    *   Solu��ão: Corrigi o erro de digitação em `sources/command/TopicCommand.cpp`.
9.  Verificação Final: Após todas as alterações, o projeto principal compila com C++98 e todos os 13 testes de unidade passam com C++14, confirmando a funcionalidade e a conformidade com as normas.
10. Refinamento dos Comandos JOIN e TOPIC: Adicionamos validações detalhadas para os comandos JOIN e TOPIC para alinhá-los com as especificações do IRC e com os modos de canal (+i, +t, +k, +l).
    - **TOPIC**: A lógica foi ajustada para que, se o modo `+t` (tópico restrito) não estiver ativo, qualquer usuário registrado no canal possa alterar o tópico. Se estiver ativo, apenas operadores podem.
    - **JOIN**: O comando foi reescrito para incluir uma cadeia de validações:
        - Verifica se o cliente está totalmente registrado (PASS, NICK, USER).
        - Verifica se o cliente já não está no canal.
        - **Modo `+l` (limite):** Verifica se o canal está cheio.
        - **Modo `+i` (apenas para convidados):** Verifica se o cliente foi convidado caso o modo esteja ativo.
        - **Modo `+k` (senha):** Verifica se a senha fornecida corresponde à do canal.
    - **Mensagens de Resposta**: Adicionamos as respostas numéricas necessárias (RPL_TOPIC, RPL_NAMREPLY, RPL_ENDOFNAMES) e mensagens de erro (ERR_CHANNELISFULL, ERR_INVITEONLYCHAN, ERR_BADCHANNELKEY) ao `Messages.hpp` para melhorar a comunicação com o cliente IRC (como o HexChat).