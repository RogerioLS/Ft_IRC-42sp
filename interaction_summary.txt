Resumo da Jornada:

1.  Contexto Inicial: Você forneceu o diretório do projeto `Ft_IRC-42sp` e enfatizou a importância de aderir às normas da Ecole 42, especificamente mantendo o padrão C++98 para o código principal.
2.  Problema C++11 no Makefile: Identificamos que o `Makefile` estava usando a flag `-std=c++11`.
    *   Solução: Alterei o `Makefile` para usar `-std=c++98`.
3.  Erros de Compilação (std::to_string): A mudança para C++98 revelou erros de compilação devido ao uso de `std::to_string` (recurso do C++11).
    *   Solução: Substituí `std::to_string` por `std::stringstream` em `sources/server/Channel.cpp`.
4.  Erros de Compilação (override): Em seguida, surgiram erros relacionados à palavra-chave `override` (também um recurso do C++11).
    *   Solução: Removi a palavra-chave `override` de `includes/server/Server.hpp` e `includes/server/IServer.hpp`.
5.  Problemas na Compilação e Execução dos Testes: Os testes falhavam devido a conflitos de versão C++ (Google Test exige C++14) e o `main.cpp` do projeto principal sendo linkado no executável de teste.
    *   Solução: Ajustei o `Makefile` principal para manter C++98. Configurei o `Makefile_test` para compilar os testes com C++14 e para excluir `main.o` da compilação do executável de teste, garantindo que o `gtest_main` funcionasse corretamente.
6.  Problemas na Captura de Mensagens nos Testes: Os testes de `PRIVMSG`, `TOPIC` e `HELP` falhavam porque as mensagens enviadas pelo `CommandHandler` não estavam sendo capturadas pelo `ServerMock`.
    *   Solução: Adicionei o método `sendMessage` à interface `IServer` e o implementei tanto na classe `Server` (usando `send()` real) quanto no `ServerMock` (capturando mensagens). Atualizei o `CommandHandler` para usar `_server.sendMessage()`. Também ajustei as asserções nos testes para corresponderem exatamente às mensagens esperadas e à contagem correta.
7.  Refactoring dos Comandos: Você solicitou a separação da lógica dos comandos `JOIN`, `PRIVMSG`, `TOPIC` e `HELP` em arquivos `.cpp` e `.hpp` dedicados.
    *   Solução: Criei `JoinCommand.hpp/.cpp`, `PrivmsgCommand.hpp/.cpp`, `TopicCommand.hpp/.cpp` e `HelpCommand.hpp/.cpp`. Movi a lógica de `CommandHandler.cpp` para esses novos arquivos, transformando-os em métodos estáticos. Atualizei `CommandHandler.hpp` e `CommandHandler.cpp` para chamar esses novos métodos.
8.  Resolução de Conflitos Pós-Rebase: Após um `git rebase`, o projeto apresentou múltiplos erros de compilação.
    *   Solução: Corrigi referências a `getClientHostName()` para `getClientipAddress()`, adicionei includes e definições de macros faltantes (`Debug.hpp`, `MAX_PASSWORD_LENGTH`), resolvi redefinições de macros e corrigi um erro de linkagem de template movendo a implementação de `resizeVector` para o `Server.hpp`.

---
### **Atualização Pós-Rebase: Implementação de Autenticação e Testes**

10. **Implementação dos Comandos de Autenticação:** Após estabilizar o projeto, reimplementamos a funcionalidade de autenticação (`PASS`, `NICK`, `USER`) que havia sido temporariamente desativada.
    *   **Ação:** Criei arquivos dedicados para cada comando (`PassCommand.hpp/.cpp`, `NickCommand.hpp/.cpp`, `UserCommand.hpp/.cpp`), seguindo a nova arquitetura.
    *   **Ação:** Centralizei as respostas numéricas do IRC (Replies) em um novo arquivo `includes/utils/Messages.hpp`.
    *   **Ação:** Registrei os novos comandos no `CommandHandler`.

11. **Criação de Testes de Unidade para Autenticação:** Para validar a nova implementação, adicionei testes ao `tests/unit/test_commands.cpp`.
    *   **Ação:** Estendi o `ServerMock` para lidar com senhas.
    *   **Ação:** Adicionei 8 novos casos de teste cobrindo o registro de usuário (sucesso, senhas incorretas, apelidos em uso, etc.).

12. **Depuração Intensiva dos Testes:** Os novos testes revelaram vários bugs sutis.
    *   **Bug:** O parser de comandos em `CommandHandler.cpp` não lidava corretamente com argumentos que continham espaços (argumentos "trailing" que começam com `:`).
    *   **Solução:** Re-escrevi a lógica de parsing de comandos para ser mais robusta e lidar corretamente com o padrão IRC.
    *   **Bug:** Inconsistências entre o código de teste e o de produção (funções com assinaturas diferentes) causaram falhas na compilação do executável principal.
    *   **Solução:** Sincronizei as declarações e implementações, e removi variáveis não utilizadas que geravam erros de compilação com a flag `-Werror`.

13. **Preparação para Teste Manual:** A pedido, preparei o servidor para testes manuais no terminal.
    *   **Ação:** Adicionei mensagens de depuração detalhadas em `Server.cpp` para monitorar conexões de clientes e dados recebidos.
    *   **Ação:** Verifiquei que o modo de depuração já estava ativado por padrão em `main.cpp`.
    *   **Ação:** Corrigi erros de compilação que surgiram ao adicionar os novos logs, garantindo que o executável `ircserv` fosse gerado com sucesso.

14. **Correção do Bug de Autenticação:**
    *   **Problema:** O servidor não enviava a mensagem de boas-vindas (`RPL_WELCOME`) após o cliente se autenticar com `PASS`, `NICK` e `USER`.
    *   **Diagnóstico:** A lógica de parsing do buffer de entrada era falha. Ela acumulava os comandos, mas não os processava porque esperava estritamente por um terminador de linha `
` (CRLF), enquanto o `netcat` enviava apenas `
` (LF).
    *   **Solução:**
        1.  Refatorei completamente a função `Server::handleClientRequest` para processar o buffer de forma mais robusta e direta.
        2.  A nova lógica agora procura por `
` como o principal delimitador de comando.
        3.  Ela também remove o `` opcional, tornando o servidor compatível tanto com o padrão IRC (`
`) quanto com ferramentas de teste como o `netcat` (`
`).
        4.  Simplifiquei as classes `Client` e `Parser`, removendo métodos e membros que se tornaram obsoletos com a nova abordagem.
    *   **Resultado:** O processo de autenticação agora funciona perfeitamente, com o servidor respondendo corretamente a cada comando e enviando a mensagem de boas-vindas no final.
